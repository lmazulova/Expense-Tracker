import Foundation
import OSLog

final class TransactionsFileCache {
    private let log = OSLog(
        subsystem: "ru.lmazulova.Expense-Tracker",
        category: "TransactionsFileCache"
    )
//  –ö–∞–∂–µ—Ç—Å—è –Ω–∞–º –Ω–µ –≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏,  –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É—é —Å–µ—Ç, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –∏—Å–∫–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
    private(set) var transactions: Set<Transaction> = [
        Transaction(
            id: 1,
            account: BankAccountShort(id: 100, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 1000.00, currency: .rub),
            category: Category( id: 1, name: "–ó–∞—Ä–ø–ª–∞—Ç–∞", emoji: "üí∞", direction: .income),
            amount: Decimal(string: "1234.56")!,
            transactionDate: ISO8601DateFormatter().date(from: "2025-06-10T12:00:00Z")!,
            comment: "–û–±–µ–¥ —Å –∫–æ–º–∞–Ω–¥–æ–π",
            createdAt: ISO8601DateFormatter().date(from: "2025-06-10T12:05:00Z")!,
            updatedAt: ISO8601DateFormatter().date(from: "2025-06-10T12:10:00Z")!
        )
    ]
    
    func addNewTransaction(_ transaction: Transaction) {
        if !transactions.contains(transaction) {
            transactions.insert(transaction)
        }
    }
    
    func deleteTransaction(byId id: Int) {
        if let transaction = transactions.first(where: { $0.id == id }) {
            transactions.remove(transaction)
        }
    }
    
    func save(to path: String) {
        let jsonArray = transactions.map { $0.jsonObject }
        
        guard JSONSerialization.isValidJSONObject(jsonArray) else {
            os_log("‚ÄºÔ∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON", log: log, type: .error)
            return
        }
        
        do {
            let data = try JSONSerialization.data(withJSONObject: jsonArray, options: [.prettyPrinted])
            try data.write(to: URL(fileURLWithPath: path))
        }
        catch {
            os_log("‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: %{public}@", log: log, type: .error, error.localizedDescription)
        }
    }
    
    func load(from path: String) {
        do {
            let data = try Data(contentsOf: URL(fileURLWithPath: path))
            guard let array = try JSONSerialization.jsonObject(with: data) as? [Any] else {
                os_log("‚ÄºÔ∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON", log: log, type: .error)
                return
            }
            let loadedData = array.compactMap { Transaction.parse(jsonObject: $0) }
            self.transactions = Set(loadedData)
        }
        catch {
            os_log("‚ÄºÔ∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞: %{public}@", log: log, type: .error, error.localizedDescription)
        }
    }
}
